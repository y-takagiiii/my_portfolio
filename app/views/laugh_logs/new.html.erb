<div class="flex flex-col items-center">
  <div class="flex items-center" >
    <div id="clap-icon-left" class="opacity-0 mr-3">
      <i class="fa-solid fa-hands-clapping fa-4x"></i>
    </div>
    <div class="my-3" id="player"></div>
    <div id="clap-icon-right" class="opacity-0 ml-3">
      <i class="fa-solid fa-hands-clapping fa-4x"></i>
    </div>
  </div>
  <%= button_tag class: "my-1 w-20 h-20 rounded-full bg-amber-500 shadow-[0_6px_6px_-1px_rgba(0,0,0,1)]", id: "laugh-button" do %>
    <i class="fa-solid fa-hands-clapping fa-3x"></i>
  <% end %>

  <%= form_with model: @laugh_log, class: "my-3" do |f| %>
    <%= f.hidden_field :laugh_log_time, id: 'laugh-log-time' %>
    <%= hidden_field_tag :video_id, @video.id %>
    <%= f.submit 'ログを作成する', class: "btn btn-sm" %>
  <% end %>
</div>

<script>
  // IFrame Player API の読み込みタグを挿入
  const tag = document.createElement('script')
  tag.src = "https://www.youtube.com/iframe_api"
  const firstScriptTag = document.getElementsByTagName('script')[0]
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag)

  // 関数onYouTubeIframeAPIReadyでiframeとYoutubeプレイヤーを作成
  let player
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      videoId: '<%= @video.youtube_id %>',
      height: '576',
      width: '1024', // アスペクト比16:9 1280:720 1024:576 896:504 768:432 640:360
      playerVars: {
        // list: ,
        rel: 0,
        fs: 0,
        modestbranding: 1,
      },
      events: {
        'onStateChange': onPlayerStateChange
      }
    })
  }

  // 動画の操作
  const laughButton = document.getElementById('laugh-button')
  let buttonPressedTime = []
  laughButton.addEventListener('click',() => {
    buttonPressedTime.push(player.getCurrentTime())
    document.getElementById("laugh-log-time").value = buttonPressedTime
  })

  laughButton.addEventListener('click',() => {
    laughButton.className = "my-1 w-20 h-20 rounded-full bg-amber-500"
    setTimeout(() => {
      laughButton.className = "my-1 w-20 h-20 rounded-full bg-amber-500 shadow-[0_6px_6px_-1px_rgba(0,0,0,1)]"
    }, 100)
  })

  <% if @post %>
    let originalButtonPressedTime = []
    <% @post.laugh_logs.each do |log| %>
      originalButtonPressedTime.push('<%= log.button_pressed_time.floor(1) %>')
    <% end %>
  <% end %>

  const clapIconLeft = document.getElementById('clap-icon-left')
  const clapIconRight = document.getElementById('clap-icon-right')

  let timerId
  function onPlayerStateChange(e) {
    if (timerId) {
      clearInterval(timerId)
    }
    if (e.data == YT.PlayerState.PLAYING) {
      timerId = setInterval(() => {
        const passedTime = player.getCurrentTime().toFixed(1)
        if (originalButtonPressedTime.includes(passedTime)) {
          setTimeout(() => {
            clapIconLeft.className = "opacity-1 mr-3"
            clapIconRight.className = "opacity-1 ml-3"
          })
          setTimeout(() => {
            clapIconLeft.className = "opacity-0 mr-3"
            clapIconRight.className = "opacity-0 ml-3"
          }, 500)
        }
      }, 100)
    } else {
      clearInterval(timerId)
    }
  }
</script>
